import telebot
import tweepy
import requests
import time
import threading
from os import getenv

# Configuration (Use environment variables for security)
TELEGRAM_BOT_TOKEN = getenv("TELEGRAM_BOT_TOKEN", "7159155946:AAE15MlJDyUqpEFpORHooSa4HLQ2c6qOORQ")
TWITTER_API_KEY = getenv("TWITTER_API_KEY", "kEgT5DC3wwJExq4cCf0PaogdD")
TWITTER_API_SECRET = getenv("TWITTER_API_SECRET", "pqtwc48FKDgSX3fJhzRvyQO64aGu5wsOSQR9e0LHA74ix39g2o")
ACCESS_TOKEN = getenv("ACCESS_TOKEN", "1528700604373434368-txUuW9pV1DNl1BVYDKR1tZIcS2gv0Y")
ACCESS_SECRET = getenv("ACCESS_SECRET", "pfI3Zu10dO134IrBC4sCqMIzDWeM9lCK8Nv47ZdqLpbFi")
DEEPSEEK_API_KEY = getenv("DEEPSEEK_API_KEY", "sk-beef174c9b364990bd05db8498802282")

# Initialize APIs
try:
    # Twitter Authentication
    twitter_auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET)
    twitter_auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)
    twitter_api = tweepy.API(twitter_auth, wait_on_rate_limit=True)
    
    # Telegram Bot
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
except Exception as e:
    print(f"Initialization error: {e}")
    exit(1)

def generate_tweet(prompt_input: str) -> str:
    """Generate AI-powered tweet using DeepSeek API"""
    api_url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "deepseek-chat",
        "messages": [{
            "role": "user",
            "content": f"""You are a Twitter growth expert for AI SaaS builders. Create a viral tweet about:
            {prompt_input}
            - Focus on AI, SaaS, startups
            - Use emojis and punchy language
            - No hashtags
            - Max 280 characters"""
        }],
        "temperature": 0.7
    }
    
    try:
        response = requests.post(api_url, json=payload, headers=headers, timeout=10)
        response.raise_for_status()
        return response.json()['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"AI Error: {e}")
        return prompt_input  # Fallback to original text

@bot.message_handler(func=lambda message: True)
def handle_telegram_message(message):
    """Handle incoming Telegram messages"""
    try:
        generated_tweet = generate_tweet(message.text)
        twitter_api.update_status(generated_tweet)
        bot.reply_to(message, f"üöÄ Tweet posted successfully!\n\n{generated_tweet}")
    except tweepy.TweepyException as te:
        bot.reply_to(message, f"‚ùå Twitter error: {str(te)}")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è General error: {str(e)}")

def monitor_mentions():
    """Auto-reply to Twitter mentions"""
    last_id = None
    while True:
        try:
            mentions = twitter_api.mentions_timeline(since_id=last_id, tweet_mode='extended')
            for mention in reversed(mentions):
                last_id = mention.id
                reply_text = f"@{mention.user.screen_name} Thanks for the mention! üôå\n\n(Generated by AI Assistant)"
                twitter_api.update_status(
                    status=reply_text,
                    in_reply_to_status_id=mention.id
                )
                print(f"Replied to mention ID: {mention.id}")
        except tweepy.RateLimitError:
            time.sleep(15 * 60)  # Wait 15 minutes on rate limit
        except Exception as e:
            print(f"Mention error: {e}")
        time.sleep(60)  # Check every minute

if __name__ == "__main__":
    # Start mention monitoring in a background thread
    threading.Thread(target=monitor_mentions, daemon=True).start()
    
    # Start Telegram bot
    print("ü§ñ Bot is running...")
    bot.infinity_polling()
